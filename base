CREATE TABLE IF NOT EXISTS Artists (
   ArtistID SERIAL PRIMARY KEY,
   Name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS Genres (
   GenreID SERIAL PRIMARY KEY,
   Name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS Albums (
   AlbumID SERIAL PRIMARY KEY,
   Title VARCHAR(255),
   Year INTEGER
);

CREATE TABLE IF NOT EXISTS ArtistsAlbums (
   ArtistID INTEGER REFERENCES Artists(ArtistID),
   AlbumID INTEGER REFERENCES Albums(AlbumID),
   PRIMARY KEY(ArtistID, AlbumID)
);

CREATE TABLE IF NOT EXISTS Tracks (
   TrackID SERIAL PRIMARY KEY,
   Title VARCHAR(255),
   Duration INTERVAL,
   AlbumID INTEGER REFERENCES Albums(AlbumID)
);

CREATE TABLE IF NOT EXISTS Compilations (
   CompilationID SERIAL PRIMARY KEY,
   Title VARCHAR(255),
   Year INTEGER
);

CREATE TABLE IF NOT EXISTS CompilationTrack (
   CompilationID INTEGER REFERENCES Compilations(CompilationID),
   TrackID INTEGER REFERENCES Tracks(TrackID),
   PRIMARY KEY (CompilationID, TrackID)
);

CREATE TABLE IF NOT EXISTS ArtistsGenres (
   ArtistID INTEGER REFERENCES Artists(ArtistID),
   GenreID INTEGER REFERENCES Genres(GenreID),
   PRIMARY KEY(ArtistID, GenreID)
);


INSERT INTO Artists (Name) VALUES
('Исполнитель 1'),
('Исполнитель 2'),
('Исполнитель 3'),
('Исполнитель 4');

INSERT INTO Genres (Name) VALUES
('Жанр 1'),
('Жанр 2'),
('Жанр 3');

INSERT INTO Albums (Title, Year) VALUES
('Альбом 1', 2020),
('Альбом 2', 2019),
('Альбом 3', 2018);

INSERT INTO ArtistsAlbums (ArtistID, AlbumID) VALUES
(1, 1),
(2, 2),
(3, 3),
(1, 4);

INSERT INTO Tracks (Title, Duration, AlbumID) VALUES
('Трек 1', '00:04:30', 1),
('Трек 2', '00:03:45', 2),
('Трек 3', '00:05:15', 1),
('Трек 4', '00:02:50', 3);

INSERT INTO Compilations (Title, Year) VALUES
('Сборник 1', 2019),
('Сборник 2', 2020),
('Сборник 3', 2018);

INSERT INTO CompilationTrack (CompilationID, TrackID) VALUES
(1, 1),
(2, 2),
(1, 3),
(3, 4);

INSERT INTO ArtistsGenres (ArtistID, GenreID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 1);

SELECT Title, Duration
FROM Tracks
WHERE Duration = (
   SELECT MAX(Duration)
   FROM Tracks
);

SELECT Title
FROM Tracks
WHERE Duration >= '00:03:30'::INTERVAL;

SELECT Title
FROM Compilations
WHERE Year BETWEEN 2018 AND 2020;

SELECT Name
FROM Artists
WHERE Name NOT LIKE '% %';

SELECT Title
FROM Tracks
WHERE Title ILIKE '% my %'
OR Title ILIKE 'my %'
OR Title ILIKE '% my'
OR Title ILIKE 'my'
OR Title ILIKE '% my%'
OR Title ILIKE '%мой %'
OR Title ILIKE 'мой %'
OR Title ILIKE '% мой'
OR Title ILIKE 'мой';

SELECT g.Name, COUNT(ag.ArtistID)
FROM Genres g
LEFT JOIN ArtistsGenres ag ON g.GenreID = ag.GenreID
GROUP BY g.Name;

SELECT COUNT(t.TrackID)
FROM Tracks t
JOIN Albums a ON t.AlbumID = a.AlbumID
WHERE a.Year BETWEEN 2019 AND 2020;

SELECT Albums.Title, AVG(EXTRACT(EPOCH FROM Tracks.Duration)) AS "Average Duration"
FROM Albums
JOIN Tracks ON Albums.AlbumID = Tracks.AlbumID
GROUP BY Albums.Title;

SELECT Artists.Name
FROM Artists
WHERE Artists.ArtistId NOT IN (
    SELECT a.ArtistId
    FROM ArtistsAlbums aa
    JOIN Albums a ON aa.AlbumId = a.AlbumId
    WHERE a.Year = 2020
);

SELECT Compilations.Title
FROM Compilations
JOIN CompilationTrack ON Compilations.CompilationID = CompilationTrack.CompilationID
JOIN Tracks ON CompilationTrack.TrackID = Tracks.TrackID
JOIN Albums ON Tracks.AlbumID = Albums.AlbumID
JOIN ArtistsAlbums ON ArtistsAlbums.AlbumID = Albums.AlbumID
JOIN Artists ON ArtistsArtist.AlbumID = ArtistsAlbums.ArtistID
WHERE Artists.Name = 'Исполнитель 1';
